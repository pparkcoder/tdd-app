미들웨어를 사용하는 이유
몽고db 와 rdbms차이
collection = tables
documents = rows
fields = columns

단위 테스트
- 개발자가 수행하고 자신이 개발한 코드 단위를 테스트
- 소스 코드의 개별 단위를 테스트하여 사용할 준비가 되었는지 확인하는 테스트 방법
- 개발 라이프 사이클의 초기 단계에서 버그가 식별되므로 버그 수정 비용을 줄이는 데 도움이 됨 -> 디버깅시간 단축
- 간단하게 메소드를 테스트하는 다른 메소드

조건
- 독립적 -> 어떤 테스트도 다른 테스트에 의존하지 않아야 함
- 격리되어야 함. ajax, axios 등 테스트 대상이 의존하는것을 다른것으로 대체

하는이유?
- 프로그래밍 크고, 메모리가 많이 들고, 다른 리소스(db등)이 필요한 경우 로컬 환경에서 쉽게 코드를 실행시켜보기 어렵기 때문
이런 프로그램을 개발하는 개발자들은 유닛테스트를 만들어서 빠르게 자신의 코드가 정상적으로 작동하는지 확인 가능
- 종속성이 있는 다른 클래스들에서 버그가 나는것을 방지하기 위함

jest가 test 파일을 찾는 방법
- 폴더안에 test.js
- 폴더안에 spec.js
- 폴더명이 tests

단위 테스트 - <대상이름>.test.js
통합 테스트 - <대상이름>.test.init.js

describe - 여러 관련 테스트를 그룹화하는 블럭을 만듬
it/test - 개별 테스트를 수행하는 곳, 각 테스트를 작은 문장처럼 설명
	expect - 값을 테스트할 때마다 사용. 거의 matcher와 함께 사용
	matcher - 여러 방법으로 값을 테스트 하기위해 사용

jest.fn()
- Mock함수를 생성하는 함수 ->해당 코드가 의존하는 부분을 대체하는 일을 해줌 = const mockFunction = jest.fn()
- 의존적인 부분을 구현하기가 까다로우며, 상태에 따라 테스트 결과가 영향을 받을 수 있기 때문
===============================================================================
